<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
    <context:annotation-config></context:annotation-config>
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.sdn" />
    
    <!-- 将静态文件指定到某个特殊的文件夹中统一处理 -->
    <mvc:resources location="/public/" mapping="/public/**" />
       
   
	<context:property-placeholder location="classpath:databases.properties" />
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${user}" />
        <property name="password" value="${password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/sdn/mapper/*.xml"></property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.sdn.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
    <!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 防止服务端传回Ajax 回调的中文乱码 -->
     <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

    <!--Shiro 配置开始 -->

    <!-- 1 配置 CredentialsMatchers -->
    <!-- 这个 bean 是配置 加密算法用 MD5 ,加密次数是两次 -->
    <!--<bean id="credentialsMatcher"  class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
    </bean>-->

    <!-- 2 配置realm -->
    <!--<bean id="myRealm" class="com.j1903.realm.myrealm">
        <property name="credentialsMatcher" ref="credentialsMatcher" />
    </bean>-->

    <!-- 3 安全管理器 -->
    <!--安全管理器是shiro工作的核心，而其实安全管理器是依赖realm 进行工作-->
    <!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm" />
    </bean>-->

    <!-- 4 配置 securityUtils  为之注入 securityManager -->
    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <!-- 更直白地说， 就是为安全工具做安全管理器的注入，这里是在做静态注入 -->
    <!-- 为 securityUtils 注入  securityManager -->
    <!--<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>-->

    <!-- 5 基于Form表单的身份验证过滤器 -->
   <!-- <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="loginUrl" value="/login"/>
    </bean>-->

    <!-- 6 Shiro过滤器 -->
    <!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        &lt;!&ndash; Shiro的核心安全接口,这个属性是必须的 &ndash;&gt;
        <property name="securityManager" ref="securityManager" />
        &lt;!&ndash; 身份认证失败，则跳转到登录页面的配置 &ndash;&gt;
        <property name="loginUrl" value="/login" />
        &lt;!&ndash; 登录成功后跳转路径 &ndash;&gt;
        <property name="successUrl" value="/index" />

        &lt;!&ndash; 权限认证失败，则跳转到指定页面 &ndash;&gt;
        <property name="unauthorizedUrl" value="/common/unauthor" />
        &lt;!&ndash; Shiro连接约束配置,即过滤链的定义 &ndash;&gt;
        &lt;!&ndash;等号右边，全是shiro的内置过滤器，配置项的键值 对，指的是:某路径=某过滤器，  &ndash;&gt;
        &lt;!&ndash; 就是说，请求这个路径代表的资源的时候 ，会蟹发对应配置的这 个过滤器 &ndash;&gt;
        <property name="filterChainDefinitions">
            <value>
                /login=authc
                /Public/**=anon
                /upload/**=anon
                /logout=logout
                /**=authc
            </value>
        </property>
    </bean>


    &lt;!&ndash; 7 登出过滤器 &ndash;&gt;
    <bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/login"/>
    </bean>-->


</beans>